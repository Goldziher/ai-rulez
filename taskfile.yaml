version: '3'

vars:
  BINARY_NAME: airules

tasks:
  build:
    desc: Build the binary
    cmds:
      - go build -o bin/{{.BINARY_NAME}} .

  install:
    desc: Install the binary
    cmds:
      - go install .

  test:
    desc: Run unit tests
    cmds:
      - go test -timeout=30s -v ./internal/...

  test:coverage:
    desc: Run unit tests with coverage
    cmds:
      - go test -timeout=30s -v -coverprofile=coverage.out ./internal/...
      - go tool cover -html=coverage.out -o coverage.html

  test:race:
    desc: Run unit tests with race detection
    cmds:
      - go test -timeout=30s -race -v ./internal/...

  test:integration:
    desc: Run integration tests
    cmds:
      - cd testing && go test -timeout=5m -v .

  test:benchmark:
    desc: Run benchmark tests
    cmds:
      - cd testing && go test -timeout=10m -bench=. -benchmem .

  test:all:
    desc: Run all tests (unit + integration)
    deps: [test, test:integration]

  lint:
    desc: Lint the code
    cmds:
      - golangci-lint run

  lint:fix:
    desc: Fix linting issues
    cmds:
      - golangci-lint run --fix

  format:
    desc: Format code with go fmt
    cmds:
      - go fmt ./...

  fmt:
    desc: Format code (alias for format)
    deps: [format]

  tidy:
    desc: Tidy dependencies
    cmds:
      - go mod tidy

  clean:
    desc: Clean build artifacts
    cmds:
      - rm -rf bin/
      - rm -f coverage.out coverage.html

  setup:
    desc: Initial development environment setup
    cmds:
      - go mod tidy
      - go install github.com/evilmartians/lefthook@latest
      - lefthook install
      - pnpm install
      - go install github.com/golangci/golangci-lint/cmd/golangci-lint@latest
      - echo "âœ… Setup complete!"

  dev:
    desc: Development setup
    deps: [tidy, format, lint, test]

  ci:
    desc: Run all checks (like CI)
    deps: [tidy, format, lint, test:race, test:integration]

  ci:unit:
    desc: Run CI unit tests only
    deps: [tidy, format, lint, test:race]

  ci:integration:
    desc: Run CI integration tests only
    deps: [test:integration]

  build:all:
    desc: Build for multiple platforms
    cmds:
      - GOOS=linux GOARCH=amd64 go build -o bin/{{.BINARY_NAME}}-linux-amd64 .
      - GOOS=windows GOARCH=amd64 go build -o bin/{{.BINARY_NAME}}-windows-amd64.exe .
      - GOOS=darwin GOARCH=amd64 go build -o bin/{{.BINARY_NAME}}-darwin-amd64 .
      - GOOS=darwin GOARCH=arm64 go build -o bin/{{.BINARY_NAME}}-darwin-arm64 .